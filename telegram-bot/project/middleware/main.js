const { Menu } = require('../utils/menu');
const { bot } = require('../bot');

// --- –≠–º—É–ª—è—Ü–∏—è "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" ---
const userBalances = {};           // –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userVipStatus = {};          // –Ω–∞–ø—Ä–∏–º–µ—Ä: { [userId]: 'vip_1' }
const userSubscriptions = {};      // –Ω–∞–ø—Ä–∏–º–µ—Ä: { [userId]: true }

const vipPrices = {
  vip_1: 20,
  vip_2: 50,
  vip_3: 100,
};

// --- –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ ---
const help = (ctx) => {
  ctx.reply(`
- /help ("–ü–æ–º–æ—â—å" –≤ –º–µ–Ω—é): –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
- /draw ("–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å" –≤ –º–µ–Ω—é): –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.
- "–ú–æ–π –±–∞–ª–∞–Ω—Å": –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
- "–ö—É–ø–∏—Ç—å –í–ò–ü —Å—Ç–∞—Ç—É—Å": –ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π.
- "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π": —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π.
- "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –í–ò–ü —Å—Ç–∞—Ç—É—Å": –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å.
  `);
};

// --- –§—É–Ω–∫—Ü–∏—è: –ú–æ–π –±–∞–ª–∞–Ω—Å ---
const getBalance = async (ctx) => {
  const userId = ctx.from.id;
  const balance = userBalances[userId] || 0;
  await ctx.reply(`–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç.`);
};

// --- –§—É–Ω–∫—Ü–∏—è: –ö—É–ø–∏—Ç—å VIP ---
const buyVip = async (ctx) => {
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –í–ò–ü:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–ü–µ—Ä–≤—ã–π –í–ò–ü', callback_data: 'vip_1' },
          { text: '–í—Ç–æ—Ä–æ–π –í–ò–ü', callback_data: 'vip_2' },
          { text: '–¢—Ä–µ—Ç–∏–π –í–ò–ü', callback_data: 'vip_3' },
        ],
      ],
    },
  });
};

const handleVipSelection = async (ctx) => {
  const userId = ctx.from.id;
  const vipKey = ctx.callbackQuery.data;
  const price = vipPrices[vipKey] || 0;
  const userBalance = userBalances[userId] || 0;

  let vipName;
  switch (vipKey) {
    case 'vip_1': vipName = '–ü–µ—Ä–≤—ã–π –í–ò–ü'; break;
    case 'vip_2': vipName = '–í—Ç–æ—Ä–æ–π –í–ò–ü'; break;
    case 'vip_3': vipName = '–¢—Ä–µ—Ç–∏–π –í–ò–ü'; break;
    default: vipName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'; break;
  }

  if (userBalance < price) {
    await ctx.editMessageText(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ "${vipName}".\nüí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${price}, —É –≤–∞—Å: ${userBalance}.`);
  } else {
    // –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    userBalances[userId] = userBalance - price;
    userVipStatus[userId] = vipKey;

    await ctx.editMessageText(`‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ç—É—Å "${vipName}".`);
  }
  await ctx.answerCbQuery();
};

// --- –§—É–Ω–∫—Ü–∏—è: –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
const subscribe = async (ctx) => {
  const userId = ctx.from.id;
  const hasVip = !!userVipStatus[userId];

  if (!hasVip) {
    const text = '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –í–ò–ü-—Å—Ç–∞—Ç—É—Å–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ –í–ò–ü, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.';
    try {
      if (ctx.callbackQuery?.message) {
        await ctx.editMessageText(text);
      } else {
        await ctx.reply(text);
      }
    } catch (e) {
      await ctx.reply(text);
    }
    await ctx.answerCbQuery?.();
    return;
  }

  userSubscriptions[userId] = true;
  const success = '‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.';
  try {
    if (ctx.callbackQuery?.message) {
      await ctx.editMessageText(success);
    } else {
      await ctx.reply(success);
    }
  } catch (e) {
    await ctx.reply(success);
  }
  await ctx.answerCbQuery?.();
};

// --- –§—É–Ω–∫—Ü–∏—è: –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
const unsubscribe = async (ctx) => {
  const userId = ctx.from.id;
  const hasVip = !!userVipStatus[userId];

  if (!hasVip) {
    const text = '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –í–ò–ü-—Å—Ç–∞—Ç—É—Å–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –í–ò–ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.';
    try {
      if (ctx.callbackQuery?.message) {
        await ctx.editMessageText(text);
      } else {
        await ctx.reply(text);
      }
    } catch (e) {
      await ctx.reply(text);
    }
    await ctx.answerCbQuery?.();
    return;
  }

  delete userSubscriptions[userId];
  const success = '‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.';
  try {
    if (ctx.callbackQuery?.message) {
      await ctx.editMessageText(success);
    } else {
      await ctx.reply(success);
    }
  } catch (e) {
    await ctx.reply(success);
  }
  await ctx.answerCbQuery?.();
};

// --- –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é ---
const menu = new Menu();
menu.addButton('üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å',               [1, 0], getBalance,      false, ['–±–∞–ª–∞–Ω—Å','/balance'],        'balance');
menu.addButton('üåü –ö—É–ø–∏—Ç—å –í–ò–ü —Å—Ç–∞—Ç—É—Å',        [1, 1], buyVip,          false, ['–≤–∏–ø','/vip'],               'vip');
menu.addButton('üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',[2, 0], subscribe,       false, ['–ø–æ–¥–ø–∏—Å–∫–∞','/subscribe'],   'subscribe');
menu.addButton('üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',[2, 1], unsubscribe,     false, ['–æ—Ç–ø–∏—Å–∫–∞','/unsubscribe'],   'unsubscribe');

menu.registerTriggers(bot);
const menuMiddleware = async (ctx, next) => {
  let handled = false;

  if (ctx.callbackQuery) {
    handled = await menu.triggerFromCallbackQuery?.(ctx);
  } else if (ctx.message) {
    handled = await menu.triggerFromMessage?.(ctx);
  }

  if (!handled) {
    await menu.drawMenu(ctx);
    return await next();
  }
};

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –í–ò–ü ---
bot.on('callback_query', async (ctx, next) => {
  const data = ctx.callbackQuery?.data;
  if (data?.startsWith('vip_')) {
    return await handleVipSelection(ctx);
  }
  return next();
});

module.exports = { menuMiddleware };
